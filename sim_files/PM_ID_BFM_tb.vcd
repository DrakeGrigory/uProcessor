$date
	Tue Nov 19 17:09:36 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module PM_ID_BFM_tb $end
$var wire 1 ! nResetCY $end
$var wire 5 " PC_Addr [4:0] $end
$var wire 1 # ID_RegCE $end
$var wire 4 $ ID_RegAddr [3:0] $end
$var wire 1 % ID_CY_CE $end
$var wire 1 & ID_A_CE $end
$var wire 3 ' ID_ALUCode [2:0] $end
$var reg 1 ( clk_tb $end
$var reg 1 ) nReset_tb $end
$scope module PC1 $end
$var wire 1 ( clk $end
$var wire 1 ) nReset $end
$var reg 5 * addr [4:0] $end
$upscope $end
$scope module PM_ID_BFM1 $end
$var wire 5 + addr [4:0] $end
$var reg 3 , ALUCode [2:0] $end
$var reg 1 & A_CE $end
$var reg 1 % CY_CE $end
$var reg 4 - RegAddr [3:0] $end
$var reg 1 # Reg_CE $end
$var reg 1 ! nResetCY $end
$upscope $end
$scope module RF_ALU_CY_A_module1 $end
$var wire 3 . ALUCode [2:0] $end
$var wire 1 & A_CE $end
$var wire 1 % CY_CE $end
$var wire 4 / RegAddr [3:0] $end
$var wire 1 # RegCE $end
$var wire 1 ( clk $end
$var wire 1 ) nReset $end
$var wire 1 ! nResetCY $end
$var wire 1 0 RegCY_Q $end
$var wire 8 1 RF_2_ALU [7:0] $end
$var wire 8 2 A_out [7:0] $end
$var wire 1 3 ALU_Co $end
$var wire 8 4 ALU_2_A [7:0] $end
$scope module A $end
$var wire 1 & CE $end
$var wire 1 ( clk $end
$var wire 1 ) nReset $end
$var wire 8 5 D [7:0] $end
$var parameter 32 6 SET $end
$var parameter 32 7 SIZE $end
$var reg 8 8 Q [7:0] $end
$upscope $end
$scope module ALU_1 $end
$var wire 8 9 A [7:0] $end
$var wire 3 : ALUCode [2:0] $end
$var wire 8 ; R [7:0] $end
$var wire 1 0 Ci $end
$var reg 1 3 Co $end
$var reg 8 < out [7:0] $end
$upscope $end
$scope module RF $end
$var wire 8 = A [7:0] $end
$var wire 1 # RegCE $end
$var wire 4 > RegNum [3:0] $end
$var wire 1 ( clk $end
$var wire 1 ) nReset $end
$var reg 8 ? out [7:0] $end
$scope module R0 $end
$var wire 1 @ CE $end
$var wire 8 A D [7:0] $end
$var wire 1 ( clk $end
$var wire 1 ) nReset $end
$var parameter 32 B SET $end
$var parameter 32 C SIZE $end
$var reg 8 D Q [7:0] $end
$upscope $end
$scope module R1 $end
$var wire 1 E CE $end
$var wire 8 F D [7:0] $end
$var wire 1 ( clk $end
$var wire 1 ) nReset $end
$var parameter 32 G SET $end
$var parameter 32 H SIZE $end
$var reg 8 I Q [7:0] $end
$upscope $end
$scope module R2 $end
$var wire 1 J CE $end
$var wire 8 K D [7:0] $end
$var wire 1 ( clk $end
$var wire 1 ) nReset $end
$var parameter 32 L SET $end
$var parameter 32 M SIZE $end
$var reg 8 N Q [7:0] $end
$upscope $end
$scope module R3 $end
$var wire 1 O CE $end
$var wire 8 P D [7:0] $end
$var wire 1 ( clk $end
$var wire 1 ) nReset $end
$var parameter 32 Q SET $end
$var parameter 32 R SIZE $end
$var reg 8 S Q [7:0] $end
$upscope $end
$upscope $end
$scope module RegCY $end
$var wire 1 % CE $end
$var wire 1 3 D $end
$var wire 1 ( clk $end
$var wire 1 T nReset $end
$var parameter 32 U SET $end
$var parameter 32 V SIZE $end
$var reg 1 0 Q $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1 V
b0 U
b1000 R
b100 Q
b1000 M
b10 L
b1000 H
b1 G
b1000 C
b0 B
b1000 7
b0 6
$end
#0
$dumpvars
0T
bx S
bx P
0O
bx N
bx K
0J
bx I
bx F
0E
bx D
bx A
0@
b0 ?
b0 >
bx =
b0 <
b0 ;
b110 :
bx 9
bx 8
b0 5
b0 4
03
bx 2
b0 1
x0
b0 /
b110 .
b0 -
b110 ,
b0 +
b0 *
0)
0(
b110 '
0&
0%
b0 $
0#
b0 "
0!
$end
#5000
b0 D
b1 I
b10 N
b100 S
00
b0 2
b0 8
b0 9
b0 =
b0 A
b0 F
b0 K
b0 P
1(
#6000
1T
1)
#10000
0(
#15000
1!
b1 "
b1 *
b1 +
1(
#20000
0(
#25000
b100 4
b100 5
b100 <
b100 1
b100 ;
b100 ?
1&
1%
b0 '
b0 ,
b0 .
b0 :
b1000 $
b1000 -
b1000 /
b1000 >
b10 "
b10 *
b10 +
1(
#30000
0(
#35000
b100 2
b100 8
b100 9
b100 =
b100 A
b100 F
b100 K
b100 P
b110 4
b110 5
b110 <
b10 1
b10 ;
b10 ?
b100 $
b100 -
b100 /
b100 >
b11 "
b11 *
b11 +
1(
#40000
0(
#45000
b110 2
b110 8
b110 9
b110 =
b110 A
b110 F
b110 K
b110 P
b111 4
b111 5
b111 <
b1 1
b1 ;
b1 ?
b10 $
b10 -
b10 /
b10 >
b100 "
b100 *
b100 +
1(
#50000
0(
#55000
b111 2
b111 8
b111 9
b111 =
b111 A
b111 F
b111 K
b111 P
b0 4
b0 5
b0 <
1@
b0 1
b0 ;
b0 ?
0&
0%
b111 '
b111 ,
b111 .
b111 :
1#
b1 $
b1 -
b1 /
b1 >
b101 "
b101 *
b101 +
1(
#60000
0(
#65000
b111 1
b111 ;
b111 ?
b111 D
b0 4
b0 5
b0 <
0@
1&
1%
b1 '
b1 ,
b1 .
b1 :
0#
b110 "
b110 *
b110 +
1(
#70000
0(
#75000
13
b0 2
b0 8
b0 9
b0 =
b0 A
b0 F
b0 K
b0 P
b11111110 4
b11111110 5
b11111110 <
b10 1
b10 ;
b10 ?
b100 $
b100 -
b100 /
b100 >
b111 "
b111 *
b111 +
1(
#80000
0(
#85000
03
10
b11111110 2
b11111110 8
b11111110 9
b11111110 =
b11111110 A
b11111110 F
b11111110 K
b11111110 P
b11111001 4
b11111001 5
b11111001 <
b100 1
b100 ;
b100 ?
b1000 $
b1000 -
b1000 /
b1000 >
b1000 "
b1000 *
b1000 +
1(
#90000
0(
#95000
b11110101 4
b11110101 5
b11110101 <
b11111001 2
b11111001 8
b11111001 9
b11111001 =
b11111001 A
b11111001 F
b11111001 K
b11111001 P
00
b1001 "
b1001 *
b1001 +
1(
#100000
0(
#105000
b11110101 2
b11110101 8
b11110101 9
b11110101 =
b11110101 A
b11110101 F
b11110101 K
b11110101 P
b11110100 4
b11110100 5
b11110100 <
b1 1
b1 ;
b1 ?
b10 $
b10 -
b10 /
b10 >
b1010 "
b1010 *
b1010 +
1(
#110000
0(
#115000
b11110100 2
b11110100 8
b11110100 9
b11110100 =
b11110100 A
b11110100 F
b11110100 K
b11110100 P
b1011 4
b1011 5
b1011 <
0%
b101 '
b101 ,
b101 .
b101 :
b1011 "
b1011 *
b1011 +
1(
#120000
0(
#125000
b1011 2
b1011 8
b1011 9
b1011 =
b1011 A
b1011 F
b1011 K
b1011 P
b1 4
b1 5
b1 <
b10 '
b10 ,
b10 .
b10 :
b1100 "
b1100 *
b1100 +
1(
#130000
0(
#135000
b1 2
b1 8
b1 9
b1 =
b1 A
b1 F
b1 K
b1 P
b0 4
b0 5
b0 <
b0 1
b0 ;
b0 ?
0&
0!
b111 '
b111 ,
b111 .
b111 :
b1111 $
b1111 -
b1111 /
b1111 >
b1101 "
b1101 *
b1101 +
1(
#140000
0(
#145000
b1110 "
b1110 *
b1110 +
1(
#150000
0(
#155000
b1111 "
b1111 *
b1111 +
1(
#160000
0(
#165000
b10000 "
b10000 *
b10000 +
1(
#170000
0(
#175000
b10001 "
b10001 *
b10001 +
1(
#180000
0(
#185000
b10010 "
b10010 *
b10010 +
1(
#190000
0(
#195000
b10011 "
b10011 *
b10011 +
1(
#200000
0(
#205000
b10100 "
b10100 *
b10100 +
1(
#206000
